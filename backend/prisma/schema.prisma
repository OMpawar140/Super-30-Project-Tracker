generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email           String          @id
  skillset        String?
  notifications   notifications[]
  projectMembers  ProjectMember[]
  createdProjects Project[]       @relation("ProjectCreator")
  taskReviews     TaskReview[]
  assignedTasks   Task[]          @relation("TaskAssignee")

  @@map("users")
}

model Project {
  id            String          @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus   @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  creatorId     String
  milestones    Milestone[]
  notifications notifications[]
  members       ProjectMember[]
  creator       User            @relation("ProjectCreator", fields: [creatorId], references: [email], onDelete: Cascade)

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole
  joinedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [email], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      MilestoneStatus @default(PLANNED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("milestones")
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String?
  priority      TaskPriority     @default(MEDIUM)
  status        TaskStatus       @default(UPCOMING)
  startDate     DateTime?
  dueDate       DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  milestoneId   String
  assigneeId    String?
  notifications notifications[]
  attachments   TaskAttachment[]
  reviews       TaskReview[]
  assignee      User?            @relation("TaskAssignee", fields: [assigneeId], references: [email])
  milestone     Milestone        @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskReview {
  id            String           @id @default(cuid())
  status        TaskReviewStatus
  comment       String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  taskId        String
  reviewerId    String
  notifications notifications[]
  reviewer      User             @relation(fields: [reviewerId], references: [email], onDelete: Cascade)
  task          Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_reviews")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model notifications {
  id           String           @id
  type         NotificationType
  title        String
  message      String
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  userId       String
  projectId    String?
  taskId       String?
  taskReviewId String?
  metadata     Json?
  projects     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks        Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  task_reviews TaskReview?      @relation(fields: [taskReviewId], references: [id], onDelete: Cascade)
  users        User             @relation(fields: [userId], references: [email], onDelete: Cascade)
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectRole {
  ADMIN
  TASK_COMPLETER
  CREATOR
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum TaskStatus {
  UPCOMING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  PROJECT_MEMBER_ADDED
  TASK_APPROVED
  TASK_REJECTED
  TASK_REVIEW_REQUESTED
  TASK_STARTED
  TASK_OVERDUE
  TASK_DUE_REMINDER
}
