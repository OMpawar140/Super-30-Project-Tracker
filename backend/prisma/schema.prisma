generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email           String          @id
  skillset        String?
  projectMembers  ProjectMember[]
  createdProjects Project[]       @relation("ProjectCreator")
  taskReviews     TaskReview[]
  assignedTasks   Task[]          @relation("TaskAssignee")

  @@map("users")
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  creatorId   String
  milestones  Milestone[]
  members     ProjectMember[]
  creator     User            @relation("ProjectCreator", fields: [creatorId], references: [email], onDelete: Cascade)

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole
  joinedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [email], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      MilestoneStatus @default(PLANNED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("milestones")
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority     @default(MEDIUM)
  status      TaskStatus       @default(UPCOMING)
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  milestoneId String
  assigneeId  String?
  attachments TaskAttachment[]
  reviews     TaskReview[]
  assignee    User?            @relation("TaskAssignee", fields: [assigneeId], references: [email])
  milestone   Milestone        @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskReview {
  id         String           @id @default(cuid())
  status     TaskReviewStatus
  comment    String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  taskId     String
  reviewerId String
  reviewer   User             @relation(fields: [reviewerId], references: [email], onDelete: Cascade)
  task       Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_reviews")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectRole {
  ADMIN
  TASK_COMPLETER
  CREATOR
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum TaskStatus {
  UPCOMING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
